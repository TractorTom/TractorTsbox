% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check.R
\name{assert_ts}
\alias{assert_ts}
\title{Vérifie la conformité d'un objet ts}
\usage{
assert_ts(x, add = NULL, .var.name = checkmate::vname(x))
}
\arguments{
\item{x}{un objet ts unidimensionnel}

\item{add}{Collection pour stocker les messages d'erreurs (Default is NULL)}

\item{.var.name}{Nom de l'objet à vérifier pour afficher dans les messages}
}
\value{
En sortie la fonction retourne l'objet \code{x} de manière invisible ou une erreur.
}
\description{
Vérifie la conformité d'un objet ts
}
\details{
Les fonctions du package ts4conj sont faites pour fonctionner avec des times-series de fréquence mensuelle ou trimestrielle et basées sur le système des mois, trimestres et années classiques. On travaille avec des données numériques (integer, double ou logical) mais les autres types atomic sont acceptés également.

Les fonctions du package ts4conj sont faites pour fonctionner avec des times-series de fréquence mensuelle ou trimestrielle et basées sur le système des mois, trimestres et années classiques.
On cherche donc à favoriser l'utilisation de séries temporelles classiques utilisants des types atomiques.
Lorsque l'objet \code{x} en entrée est au mauvais format, une erreur est généré.
}
\examples{
ts1 <- ts(1:100, start = 2010L, frequency = 12L)
ts2 <- ts(1:10, start = c(2020L, 4L), frequency = 4L)

assert_ts(ts1)
assert_ts(ts2)

}
