% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check.R
\name{is.date_ts}
\alias{is.date_ts}
\title{Vérifie le format de date}
\usage{
is.date_ts(date_ts, frequency = 12L, withWarning = TRUE)
}
\arguments{
\item{date_ts}{un vecteur numérique, de préférence integer au format AAAA, c(AAAA, MM) ou c(AAAA, TT)}

\item{frequency}{un entier qui vaut 4L (ou 4.) pour les séries trimestrielles et 12L (ou 12.) pour les séries mensuelles.}

\item{withWarning}{un booléen}
}
\value{
En sortie la fonction retourne un booleen et un warning additionnel si besoin.
}
\description{
La fonction \code{is.date_ts} vérifie qu'un objet est de type AAAA, c(AAAA, MM) ou c(AAAA, TT)
}
\details{
Les fonctions du package ts4conj sont faites pour fonctionner avec des times-series de fréquence mensuelle ou trimestrielle et basés sur le système des mois, trimestres et années classiques.
On cherche donc à favoriser l'utilisation de vecteur c(AAAA, MM) pour désigner la date choisie.
}
\examples{
# De bons formats de date
is.date_ts(c(2020L, 8L))
is.date_ts(c(2020L, 2L))
is.date_ts(2022L)

# Format double --> génération d'un warning
is.date_ts(c(2020, 4))
is.date_ts(2022)

# Dépassement la fréquence--> génération d'un warning
is.date_ts(c(2020L, 6L), frequency = 4L)
is.date_ts(c(2020L, 42L), frequency = 12L)
is.date_ts(c(2020L, -4L))

# Mauvaise fréquence --> reponse FALSE
is.date_ts(c(2020L, 7L))

# Format non accepté --> reponse FALSE
is.date_ts(2022.5)
is.date_ts(2022 + 1/12)
is.date_ts(2023 + 1/4)
is.date_ts("2020-04-01")
is.date_ts(as.Date("2020-04-01"))
}
