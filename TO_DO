Création du package :
- 1) Faire une fonction qui prolonge d'un certain nombre de point / qui prolonge juqu'à une certaine date un ts (Erreur : "number of values supplied is not a sub-multiple of the number of values to be replaced")
- 2) Faire le tour des tests et retirer les create_random... qui ne servent pas
- 3) créer des tests de résultats mauvais à partir de ts créés à partir de liste
    (exemple : ts(list(2, 3, c(1, 2)), start = 2010, frequency = 12))
- 4) Unifier les tests sur tous les fichiers tests avec :
    - des variables bonnes
    - des variables bonnes avec warning
    - des variables mauvaise
    (variables = len, start, freq, type, ...)
- 5) Comlpéter le fuzzing avec d'autres objets R (regarder d'autres sources /
    packages ?)
- 6) Ajouter des Quasiquotation !! (bang-bang) pour mieux tester et analyser les
    erreurs (notamment avec des précisions sur les inputs, ...)
- 7) Lorsqu'on teste les erreurs, il faut itéré TOUS les arguments valides (exemple
    tous les ts avec toutes les fréquences, start, len, typeA.. pour un type
    d'erreur)
- 8) retirer tous les accents et caractères non ascii des test (et de n'importe quel code R !)
- 9) relire + ré-écrire les 1er tests avec des bons / mauvais test
- 10) Relire les commentaire Roxygen2 et à chaque fois que l'on précise "En sortie"
    (@return), il faut préciser le type d'objet qu'il y a en sortie, un vecteur,
    un entier, la class, le mode et le calcul qui permet de sortir cette valeur.
- 11) faire des vignettes par type d'erreurs (voir comment faire dess liens dabs l a dox des fonctions et les vignettes)
    - l'idée est d'expliquieztr dans quels cas on peut obtenir cette erreur
- 12) Ajouter des tests pour les nouvelles fonctions de conversion
- 13) retirer les caractères non ASCII des tests
- 14) Changer les liste de start (tests combine2ts) pour passer à une combinaison de month, quarter et year
- 15) retirer le pipe et tout appel au pipe au moins dans les fonctions sous R + placeholder
- 16) Trouver un moyen de faire un CI/CD sur gitlab.insee et le gitlab du SSP cloud
- 17) Commenter les tests d'input (juste une ligne pour expliquer ce que fait le code)
    - Vérifier que toutes les fonctions aient bien des tests au début du corps de la fonction qui correspondent bien à l'ensemble des inputs
        - vérfier que les tests soient les mêmes pour chaque fonction (si on teste le fait que la fréquence est bie une fréqunce enttière entre 4 et 12, il faut que la ligne de code soit la même dans tous les programmes qui testent ce genre de fréquence) + ajouter le commentaire qui va avec
- 18) Lorsqu'on effectue un test (exemple tester que la fréquence est bien entière...), si on effectue ce test dans pluseirus fonctions, créer une fonction spécialisée dans ce test là.
- 19) Relire les check et essayer de les remplacer avec le package checkmate ou assertthat ou autre qui pouirrait convenir (voir les bonnes pratiques)
- 20) Faire une recherche de toutes les classes "atomic" connues et vérifier lesquelles fonctionnent ou non avec des ts (pour étendre ou créer simplement des ts)
- 21) Ajouter de la documentation aux fonctions qui n'en ont pas
- 22) Faire le tour des numeriques entiers non déclarés integer
- 23) Dans les stop, vérifier que les arguments sont bien entre quote pour code.
- 24) Ajouter des retours à la ligne et des {} après chaque if
- 25) Regarder comment bien manager les erreurs pour renvoyer à des vignettes ou des fiches d'help
    - voir si il existe de packages pour cela
    - Préciser l'appel à d'autres fonctions

