A Faire :

Urgent pour faire fonctionner le package :


Développement à venir :

- 1) Création de vignettes. Idées :
    - Expliquer les types d'objets attendus (pour expliquer les erreurs) :
        - Format de date :
            - Date (base R)
            - date_ts (fonctionne avec une fréquence)
            - TimeUnits
            - Fonction de conversion, de comparaison
        - Objet ts attendu :
            - Type, Contenu ?
            - fréquences ?
            - Structure et date ?
            - Fonctions de modification
        - Fonctions de tests : s'inspirent du package checkmate (extension de checkmate) et ont pour but de sortir des erreurs (ce sont des assert et non des test ou des checks)
    - Chercher comment faire des liens entre doc de fonction et vignettes

- 2) Création et relecture des tests :
    - Créer des messages d'erreur + warning dans helper personnalisés avec noms de variable et pour tous les test
    - Ajouter des tests sur libelés et libelé_one_date avec plusieurs dates pour tester.
    - Refaire les tests qui manquent :
        - getValue_ts
        - date2date_ts
        - substr_year
        - date_ts2date
        - previous_date_ts
        - next_date_ts
        - firstDate
        - lastDate
        - is_before
        - diff_periode
        - extend_ts
        - na_trim
        - assert_TimeUnits
        - assert_frequency
        - assert_scalar_integer
        - assert_scalar_natural
        - assert_scalar_date
    - Refaire test-format_date_ts
    - Compléter le check de test-assert_date_ts pour ajouter :
        - des check sur les frequency
        - des checks que le résultats output (lrsqu'il y a des warning soit bien égale à la version integer des inputs double)
    - Faire le tour des fonctions pour lesquelles il manque des tests
    - Itérer sur TOUS les arguments valides (exemple tous les ts avec toutes les
    fréquences, start, len, typeA.. pour un type d'erreur)

- 3) Documenation :
    - Relire les commentaires Roxygen2
    - Dans la partie @detail, détailler le calcul qui permet de sortir cette valeur.
    - Ajouter une partie @description pour expliquer ce que fait la fonction
    - Faire le tour des tags que l'on pourrait ajouter comme doc
    - Relire les docs existantes (pour ré-écrire / compléter)
    - Doc existante : ajouter le default des arguments
    - Toutes les fonctions sont documentées actuellemnt !
    - Ajouter un tag @usage pour montrer quelle fonctions s'écrit avec quels arguments
    - Dans les exemples des fonctiosn de check et de assert, il faut ajouter des cas où ça échoue et des cas où il peut y avoir des warnings (mais avec des try et ... pour ne pas géner le check du pkg)
    - DAns les checks, essayer de faire une page de doc générique (pour tous les checks et assert ???) afin de ne pas répéter un même bloc de code et de bénéficier d'une même page pour plusieurs checks ?

- 4) Re-écrire les fonctions assert à partir de fonction de check. Par exemple pour une fonction random check_1, plutôt que de créer assert_1 à la main, il vaut mieux créer une assertion avec makeAssertion (du package checkmate)

- 5) Ré-écrire une fonction de "merge" des checks (c'est à dire qui prend en argument plusieurs check et qui retourne un message qui combine ces différents checks)

- 6) Faire aussi les tests des check_XXX




Idée pour plus tard :

- 1) Compléter le fuzzing avec d'autres objets R (regarder d'autres sources /
packages ?)
- 2) Ajouter des Quasiquotation !! (bang-bang) pour mieux tester et analyser les
    erreurs (notamment avec des précisions sur les inputs, ...)
- 3) Trouver un moyen de faire un CI/CD
    - sur gitlab.insee :
        - interlocuteurs : Julien Jamme, Théo Leroy, Pierre-Yves Berrard
        - https://gitlab.insee.fr/dsct/ica/rmonica/-/tree/main/
        - https://gitlab.insee.fr/ecmoss-self/fichiers-info/pkg-fier/
        - https://gitlab.insee.fr/demographie-entreprises/sine/pkg-sine
        - Chercher le tag r-package sur gitlab
    - sur le gitlab du SSP cloud (datalab et git.lab)
- 4) Se renseigner au sujet des traductions :
    - https://cran.r-project.org/doc/manuals/r-devel/R-exts.html#R-messages
    - https://r-pkgs.org/misc.html#other-directories
    - https://michaelchirico.github.io/potools/
- 5) Faire une recherche de toutes les classes "atomic" connues et vérifier lesquelles fonctionnent ou non avec des ts (pour étendre ou créer simplement des ts)
- 6) Faire l'inventaire des if () stop() qui ne sont pas remplacer par du checkmate pour trouver l'équivalent checkmate à mettre à la place. (Par exemplepour tester que 2 objets sont de même signe)
- 7) Mettre en place un fichier de NEWS (usethis::use_news_md())
- 8) Concernant les checks, regarder les fonctions + check suivants :
    - le package rhub
    - le package goodpractice
    - le package inteRgrate
    - tous les tests de devtools (devtools::check_mac_release(), win_release, ...)
    - CRAN specific check
    - Faire une fiche avec tous les check existants et dans quel ordre les effectuer :
        - https://www.marinedatascience.co/blog/2020/01/09/checklist-for-r-package-re-submissions-on-cran/
        - https://www.r-bloggers.com/2020/07/how-to-write-your-own-r-package-and-publish-it-on-cran/
- 9) Lire https://r-pkgs.org/
- 10) Faire un hexagone
- 11) Ajouter le + de badges possible sur le github :
    - Voir doremifasol
- 12) Faire un pkgdown
- 13) Ajouter un readme
- 14) Ajouter des options warn dans les fonctions pour ajouter (oui ou non) des warnings



Réflexion non finies :


