A Faire :

Urgent pour faire fonctionner le package :

1) utiliser le code suivant pour tester les fonctions que l'on fait tourner sans test (exemple stats::frequency(), stats::start(), as.integer()) pour récupérer des infos sans avoir tester les objets avant... :

f <- function(x) {
    res2 <- tryCatch({log(x)},
                     error = function(e) e,
                     warning = function(w) w)

    if (is(res2, "warning")) {
        warning("Il y a un truc bizarre avec x...")
    } else if (is(res2, "error")){
        stop("Confirmed !")
    }

    return(1)
}

f(3)
f(-1)
f("a")



Développement à venir :

- 1) Création de vignettes. Idées :
    - Expliquer les types d'objets attendus (pour expliquer les erreurs) :
        - date_ts sans fréquence ne veut rien dire
        - qu'est ce qu'un objet TimeUnits
    - Chercher comment faire des liens entre doc de fonction et vignettes
- 2) Création et relecture des tests :
    - Ajouter des tests sur libelés et libelé_one_date avec plusieurs dates pour tester.
    - Refaire les tests qui ne sont pas plus valide
    - Refaire test-format_date_ts
    - Faire le tour des fonctions pour lesquelles il manque des tests
    - Itérer sur TOUS les arguments valides (exemple tous les ts avec toutes les
    fréquences, start, len, typeA.. pour un type d'erreur)
- 3) Relire les commentaire Roxygen2 et à chaque fois que l'on précise "En sortie"
    (@return), il faut préciser le type d'objet qu'il y a en sortie, un vecteur,
    un entier, la class, le mode et le calcul qui permet de sortir cette valeur.
    - Faire le tour des tags que l'on pourrait ajouter comme doc
- 4) Approfondir la doc :
    - Relire les docs existantes (pour ré-écrire / compléter)
    - Doc existante : ajouter le default des arguments
    - Faire le tour des fonctions non documentées (les répertorier)
- 5) Ajouter un test de couverture globale avec le package covr (lien test et doc) + devtools::test_coverage() (ce qui revient au même)
- 6) Ajouter un test de temporalConsistence (faire la recherche dans le pkg) et le renommer (temporal coherence ?)
    - chercher des cas où la fréquence est la même et où il y a quand même des pb de cohérence temporelle
- 7) Faire le lien entre lastDate et na_trim (pour essayer d'appliquer l'un à l'autre...)
    - vérifier les check dans lastDate
- 8) Faire la doc des fonctions non exportées :
    - substr_year


Idée pour plus tard :

- 1) Compléter le fuzzing avec d'autres objets R (regarder d'autres sources /
packages ?)
- 2) Ajouter des Quasiquotation !! (bang-bang) pour mieux tester et analyser les
    erreurs (notamment avec des précisions sur les inputs, ...)
- 3) Trouver un moyen de faire un CI/CD
    - sur gitlab.insee :
        - interlocuteurs : Julien Jamme, Théo Leroy, Pierre-Yves Berrard
        - https://gitlab.insee.fr/dsct/ica/rmonica/-/tree/main/
        - https://gitlab.insee.fr/ecmoss-self/fichiers-info/pkg-fier/
        - https://gitlab.insee.fr/demographie-entreprises/sine/pkg-sine
        - Chercher le tag r-package sur gitlab
    - sur le gitlab du SSP cloud (datalab et git.lab)
- 4) Se renseigner au sujet des traductions :
    - https://cran.r-project.org/doc/manuals/r-devel/R-exts.html#R-messages
    - https://r-pkgs.org/misc.html#other-directories
    - https://michaelchirico.github.io/potools/
- 5) Faire une recherche de toutes les classes "atomic" connues et vérifier lesquelles fonctionnent ou non avec des ts (pour étendre ou créer simplement des ts)
- 6) Faire l'inventaire des if () stop() qui ne sont pas remplacer par du checkmate pour trouver l'équivalent checkmate à mettre à la place. (Par exemplepour tester que 2 objets sont de même signe)
- 7) Mettre en place un fichier de NEWS (usethis::use_news_md())
- 8) Concernant les checks, regarder les fonctions + check suivants :
    - le package rhub
    - le package goodpractice
    - le package inteRgrate
    - tous les tests de devtools (devtools::check_mac_release(), win_release, ...)
    - CRAN specific check
    - Faire une fiche avec tous les check existants et dans quel ordre les effectuer :
        - https://www.marinedatascience.co/blog/2020/01/09/checklist-for-r-package-re-submissions-on-cran/
        - https://www.r-bloggers.com/2020/07/how-to-write-your-own-r-package-and-publish-it-on-cran/
- 9) Lire https://r-pkgs.org/
- 10) Faire un hexagone
- 11) Ajouter le + de badges possible sur le github
- 12) Faire un pkgdown
- 13) Ajouter un readme
- 14) Ajouter des options warn dans les fonctions pour ajouter (oui ou non) des warnings

