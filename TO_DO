Création du package :
- 1) Regarder comment bien manager les erreurs pour renvoyer à des vignettes ou des fiches d'help
    - voir si il existe de packages pour cela
    - Préciser l'appel à d'autres fonctions
- 2) Compléter le fuzzing avec d'autres objets R (regarder d'autres sources /
    packages ?)
- 3) Ajouter des Quasiquotation !! (bang-bang) pour mieux tester et analyser les
    erreurs (notamment avec des précisions sur les inputs, ...)
- 4) Lorsqu'on teste les erreurs, il faut itéré TOUS les arguments valides (exemple
    tous les ts avec toutes les fréquences, start, len, typeA.. pour un type
    d'erreur)
- 5) relire + ré-écrire les 1er tests avec des bons / mauvais test
- 6) Relire les commentaire Roxygen2 et à chaque fois que l'on précise "En sortie"
    (@return), il faut préciser le type d'objet qu'il y a en sortie, un vecteur,
    un entier, la class, le mode et le calcul qui permet de sortir cette valeur.
    - Faire le tour des tags que l'on pourrait ajouter comme doc
- 7) faire des vignettes par type d'erreurs (voir comment faire dess liens dabs l a dox des fonctions et les vignettes)
    - l'idée est d'expliquier dans quels cas on peut obtenir cette erreur
- 8) Faire le tour des tests à ajouter
- 9) Résoudre les problèmes de check (à refaire tourner)ndow<-’
- 10) Trouver un moyen de faire un CI/CD
    - sur gitlab.insee (voir avec Julien Jamme) et
    - sur le gitlab du SSP cloud (datalab et git.lab)
- 11) Se renseigner au sujet des traductions :
    - https://cran.r-project.org/doc/manuals/r-devel/R-exts.html#R-messages
    - https://r-pkgs.org/misc.html#other-directories
    - https://michaelchirico.github.io/potools/
- 12) Faire une recherche de toutes les classes "atomic" connues et vérifier lesquelles fonctionnent ou non avec des ts (pour étendre ou créer simplement des ts)
- 13) Ajouter de la documentation aux fonctions qui n'en ont pas
- 14) Ajouter des retours à la ligne et des {} après chaque if
- 15) Ajouter un test de couverture globale avec covr (100%) (
    library("covr")
    covr <- package_coverage()
    covr
    report(covr))
- 16) Concernant les check, assert, is...
    - ne jamais mettre de stop dans les fonctions de traitements --> que des assert
    - Faire ses propres assert_..., check_..., is_... (selon l'output que l'on veut) avec :
        - ses warnings personnalisés
        - ses erreurs personnalisés
    - pour le package checkmate, ne pas hésiter à voir la doc pour utiliser les check_scalar, check_int, check_integerish, check_integer, ...
    - Dans les stop (les erreurs), vérifier que les arguments sont bien entre quote pour code.

